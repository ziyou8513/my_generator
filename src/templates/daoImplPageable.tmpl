package ${daoImplPackage};

import ${modelHome}.Page;
import ${daoPackage}.${upperModelName}Dao;
import ${daoPackage}.mapper.${upperModelName}Mapper;
import ${modelDatabase}.${upperModelName};
import ${modelDatabase}.${upperModelName}Example;
import org.springframework.beans.factory.annotation.Autowired;
import ${modelHome}.Pageable;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ${upperModelName}DaoImpl implements ${upperModelName}Dao {

    @Autowired
    private ${upperModelName}Mapper ${lowerModelName}Mapper;

    @Override
    public int insert(${upperModelName} record) {
        return ${lowerModelName}Mapper.insert(record);
    }

    @Override
    public int update(${upperModelName} record) {
        return ${lowerModelName}Mapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public ${upperModelName} find(String id) {
        return ${lowerModelName}Mapper.selectByPrimaryKey(id);
    }

    @Override
    public List<${upperModelName}> findList(${upperModelName} record) {
        ${upperModelName}Example example = new ${upperModelName}Example();
        ${upperModelName}Example.Criteria criteria = example.createCriteria();
        //TODO query condition
        return ${lowerModelName}Mapper.selectByExample(example);
    }

    @Override
    public Page<${upperModelName}> findPage(${upperModelName} record, Pageable pageable) {
        ${upperModelName}Example example = new ${upperModelName}Example();
        ${upperModelName}Example.Criteria criteria = example.createCriteria();
        //TODO query condition

        int totalNum = ${lowerModelName}Mapper.countByExample(example);
        if (pageable.getPage() != null && pageable.getLimit() != null) {
            example.setOrderByClause(String.format("create_time desc limit %s,%s", (pageable.getPage() - 1) * pageable.getLimit(), pageable.getLimit()));
        }
        List<${upperModelName}> data = ${lowerModelName}Mapper.selectByExample(example);
        return new Page<>(data, totalNum);
    }
}